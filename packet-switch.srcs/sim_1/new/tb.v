`timescale 1ns/10ps

module tb;

reg clk;
reg encoded;
wire [463:0] decoded;
wire [15:0] source_port;
wire [15:0] dest_port;
wire [134:0] data;

integer i;

// Instantiate the design under test
pass_through dut (
    .clk(clk),
    .encoded(encoded),
    .decoded(decoded),
    .source_port(source_port),
    .dest_port(dest_port),
    .data(data)
);

// Clock generation
always begin
    #5 clk = ~clk;
end

// Define Ethernet frame
localparam ETH_FRAME_LEN = 976;

localparam eth_frame_simple = 976'b
localparam eth_frame_complex = 976'b

reg [ETH_FRAME_LEN-1:0] eth_frame = eth_frame_simple;

initial begin
    // Initialize inputs
    clk = 0;
    encoded = 0;

    // Apply Ethernet frame to encoded input bit by bit
    for (i = 0; i < ETH_FRAME_LEN; i = i+1) begin
        @(posedge clk);
        encoded = eth_frame[i];
    end
    
    encoded = 0;

    // Check outputs
    // ...
end

endmodule
